
namespace package
import config
import ide
import web.json 
import string
import fsys
import fsys.log
import string.toml
import table
import io
import inet.http
import package.downloadFile
_amodDir =  ..io.appData("/aardio/amod")
_cacheDir = ..io.appData("/aardio/amod/cache")
var projectDir = ide.getProjectDir()
_cacheSystemLibPath = fsys.joinpath(_amodDir,"systemLib.json")
_cacheGithubLibPath =  fsys.joinpath(_amodDir,"githubLib.json")
_global_config_path =  fsys.joinpath(..io._exedir,"extensions","amod.toml")
_project_config_path =  fsys.joinpath( projectDir,"amod.toml")
_global_install_path = io.fullpath("~/lib")
_project_install_path = fsys.joinpath(projectDir,"lib")	 
_log_path = fsys.joinpath(_amodDir,"amod.log")


function checkLogSize(size){
	if(io.exist(_log_path)){
		var f = io.open(_log_path,"r")
		if(f.size(1) > size){
			fsys.delete(_log_path) //only log file	
		}
	}
}
checkLogSize(0x20000)

var log = fsys.log(_log_path)

getGlobalPath=function(){
		return  _global_config_path
}
getLocalPath = function(){
	return _project_config_path

}

// check global or local toml
switchConfigPath=function (index){
	select(index) {
		case 1 {
			config.toml.path=_project_config_path
		}
		case 2 {
			config.toml.path=_global_config_path
		}
	}
	config.saveAll()
}
//返回子库目录路径，有的库当前没有aardio文件
findLibFullPath = function(extraDir){
	 if(!..io.exist(extraDir)){
	 	return ; 
	 }

 	
 	var setupFile = ..fsys.joinpath(extraDir,"setup.dl.aardio")
	if( ..io.exist(setupFile) ){
		..fsys.delete(setupFile)	
	}
	
	var libFullPath;
	..fsys.enum( extraDir, "_.aardio",
		function(dir,filename,fullpath,findData){ 
			libFullPath=dir
			return false; 
		}
	,true);

	return libFullPath; 
}
loadCacheLib = function(){
	import web.json;
	var systemLibs,githubLibs = {},{}
	if(io.exist(_cacheSystemLibPath)){
		systemLibs =web.json.parse( string.load(_cacheSystemLibPath))
	}
	if(io.exist(_cacheGithubLibPath)){
		githubLibs =web.json.parse( string.load(_cacheGithubLibPath))
	}
	return ..table.mix(systemLibs,githubLibs); 
}

update = function(){
	//get all remote package listview
	//save list to local cache
	var err = null
	try{
		var libs = ide.requestLibInfo("all") //get aardio libs
		string.save(_cacheSystemLibPath,web.json.stringify(libs))	
	}
	catch(e){
		err = e
	}
	

	//get remote libs
	var cdnUrl="https://cdn.jsdelivr.net/gh/zzerding/amod@release/libs.json.gz"
	//var rawUrl ="https://github.com/zzerding/amod/raw/release/libs.json.gz"
	var fastGitUrl="https://raw.fastgit.org/zzerding/amod/release/libs.json.gz"
	import inet.whttp
	var http = inet.whttp()
	http.setTimeouts(3000,3000,3000)
	//先以 github 加速服务访问，考虑到国内环境原始url估计都访问不了
	try{
		var ret = http.get(fastGitUrl)
		if(http.statusCode!=200){
			ret = http.get(cdnUrl) //jsdelivr 这个cdn缓存不知道多久，不能刷新。不行后期搞个免费的cdn试试
		}
		if(http.statusCode!=200){
			return error("连接超时"); 
		}
		import zlib
		var libsStr = zlib.uncompress(ret)
		string.save(_cacheGithubLibPath,libsStr)
	}
	catch(e){
		err = e
	}
	
	return  err; 
}

filterLib = function(keyword,libs){
    	var k = keyword;
    	if(#k) k = string.trim(k);
   
    	if(!#k){
    		return libs;
    	}
    	keywords = string.splitEx(string.lower(k),"\s+");
     	
    	var result = {}

    	for(name,libInfo in libs){ 
    		for(i,k in keywords){
    			if(libInfo.keywords){
    				if(string.indexOf(string.lower(libInfo.keywords),k)) {
    					result[name] = libInfo;
    					continue;
    				}
    			}
    			
    			if(libInfo.description){
    				if(string.indexOf(string.lower(libInfo.description),k)) {
    					result[name] = libInfo;
    					continue;
    				}
    			}
    			
    			if(libInfo.author){
    				if(string.indexOf(libInfo.author,k)) {
    					result[name] = libInfo;
    					continue;
    				}
    			}
    			
    			if(string.indexOf(name,k)) {
    				result[name] = libInfo;
    				continue;
    			}
    		} 
    	};

		return result
}


// 和 io.libPath 差不多的功能只是把包名转换为路径 
//返回包的父文件夹 和 包位置;如果包位置不存在返回null
convLibPath = function(libName,basePath){
	var sp = string.split(libName,".")
	basePath = io.fullpath(basePath)
	var libPath,parentDir;
	
	parentDir = basePath
	for(i=1;#sp-1;1){
		parentDir = fsys.joinpath(parentDir,sp[i])
	}
	libPath = basePath
	for(i=1;#sp;1){
		libPath = fsys.joinpath(libPath,sp[i])
	}
	if(io.exist(libPath)){
		return parentDir,libPath; 
	}
	libPath = libPath+".aardio"
	if(io.exist(libPath)){
		return parentDir,libPath; 
	}


	return  parentDir,null; 
}

//file link 创建文件硬连接目录软连接
var createLink = function(libName,linkPath,targetPath){
	//直接复制到目录目录但是有个问题，就是电脑存在多个
	//符号连接要提权才能进行复制 硬连接不能连接目录
	//cmd mklink 测试不用提权 待测试
	import  process.popen
	import fsys
	import string.template
	linkPath = ..io.fullpath(linkPath)
	targetPath = ..io.exist(targetPath)
	
	if(! targetPath) error("参数二目录路径不存在",2)
	
	//create base dir
	if(!io.exist(linkPath)) io.createDir(linkPath)
	
	//join path fileName
	var fileName;
	if(fsys.isDir(targetPath)){
		var sp = ..string.split(libName,".") //有时候仓库名称不是库空间名
		fileName = sp[#sp]
	}else{
		fileName = fsys.getFileName(targetPath)
	}
	
	linkPath = fsys.joinpath(linkPath,fileName)
	
	if(io.exist(linkPath)) error("创建链接失败！参数一目录已经有同名文件存在",2)
	
	// 参数 /j 表示符号链接目录 /h为硬链接 /d为符号链接文件要提权进行
	var flag = fsys.isDir(targetPath)?"/J":"/H"
	
	var cmdTeplate = string.template(`mklink ${flag} ${linkPath} ${targetPath}`)
	var cmdCerateLink =cmdTeplate.format(
		flag = flag;
		linkPath = linkPath;
		targetPath = targetPath
	)
	
	var prcs = process.popen.cmd(cmdCerateLink)
	var err = prcs.readErr(-1)
	prcs.close()
	return  err; 
}

//install  file path
var installForPath = function(libName,libInfo,installPath){
	createLink(libName,installPath,libInfo.path)
}
//install for url
var installForUrl = function(libName,libInfo,installPath){
	downloadUrl = libInfo.url
	var saveDir = ..fsys.joinpath(_cacheDir,libName,libInfo.version)
	var extraDir = saveDir
	//只下载压缩文件
	var mutex = ..process.mutex("{4F4ED831-0B97-4EC2-BAC7-A616051108FC}.lock.import." + libName,false,false);
	mutex.wait(); {
			var ok,libPath =package.downloadFile.download(downloadUrl,"amod 下载 "+libName+" 扩展库",saveDir,extraDir);
			if(!ok) error("下载解压出错",2)
			createLink(libName,installPath,libPath)

		} mutex.release();
}
//install for git
import gitDownBox
import package.git
var installForGit = function(libName,libInfo,installPath){
	var gitBox = gitDownBox()
	var workDir = package.git.urlConvDirPath(libInfo.git)
	var url = libInfo.git
	var mutex = ..process.mutex("{B0AD90E3-E207-4095-AF06-547FB8B2D313}.lock.import." + url,false,false);
	mutex.wait(); {
		if(!..io.exist(workDir)) {; 
			gitBox.commnad("clone",workDir,url)	
		}
	} mutex.release();
	if(#gitBox.err>0){
		error(gitBox.err,2)
	}
	var libPath = findLibFullPath(workDir)
	createLink(libName,installPath,libPath)

}


loadConfig = function(tomlPath){
	var tomlConfig = { dependencies = {}}
	tomlPath = tomlPath || config.toml.path
	if(io.exist(tomlPath)){
		tomlConfig=string.toml.parse(string.load(tomlPath))
	}
	return tomlConfig; 
}

loadInstallLibs = function(tomlPath){
		var globalLibs = loadConfig(_global_config_path).dependencies
		var projectLibs = loadConfig(_project_config_path).dependencies
		return ..table.mix(globalLibs,projectLibs); 
}

writConifg = function(libName,libInfo,tomlPath){
	var tomlConfig = loadConfig()
	tomlPath =tomlPath||  config.toml.path
	tomlConfig.dependencies[libName] = libInfo
	string.save(tomlPath,string.toml.stringify(tomlConfig))
}
readConfig = function(libName,tomlPath){
	var tomlConfig = loadConfig()
	return tomlConfig.dependencies[libName]; 
}



//如果 installPath 没有传入则使用 config.toml.installedDir 
installLib= function(libName,libInfo,installPath){
	//安装优先级为 path url git
	installPath = installPath : config.toml.installedDir
	var err
	if(!io.exist(installPath)) return "安装路径不存在"; 
	var libPath
	installPath,libPath = convLibPath(libName,installPath)
	if(libPath) return ""; //存在未更新
		
	var _,globalLibPath = package.convLibPath(libName,_global_install_path)
	if(globalLibPath) return libName+"  已全局安装"
	try{
		if(libInfo.path){
			 installForPath(libName,libInfo,installPath)
		}else if(libInfo.url){
			 installForUrl(libName,libInfo,installPath)	
		}else if(libInfo.git){
			 installForGit(libName,libInfo,installPath)
		}
		//lock Config()
	}catch(e){
		err = e
		log.print(e)
	}
	return err; 
}

install= function(installPath,tomlPath){
	var libs=loadCacheLib()
	installPath = installPath || config.toml.installedDir
	tomlPath = tomlPath || config.toml.path
	var installLibs = loadInstallLibs(tomlPath)
	var logs = ""
	for libName,v in ..table.eachName(installLibs){
		var libInfo
		if(type(v)==type.string){
			libInfo=libs[libName]
		}else{
			libInfo = v
		}
		if(libInfo){
			var err=installLib(libName,libInfo,installPath)
			msg = err ? err : "安装成功"
			logs = string.concat(logs,libName,libInfo.version,msg,'\n')
		}
	}
	return logs; 
}



function deleteLibFile(libName,installPath){
	installPath = installPath || config.toml.installedDir
	var libDir,libPath = convLibPath(libName,installPath)
	var isDelete
	if(io.exist(libPath)){
		isDelete = fsys.delete(libPath)
	}
	return isDelete; 
}

removeLibConfig=function(libName,tomlPath){
	tomlPath = tomlPath || config.toml.path
	var dependencies = {}
	var configTable =  string.toml.parse(string.load(tomlPath))
 	for(k,v in table.eachName(configTable.dependencies)){
		if(k!=libName){
			dependencies[k] = v
		}
	}
	configTable.dependencies = dependencies
	var isSave,err = ..string.save(config.toml.path, ..string.toml.stringify(configTable))
	return isSave,err; 
}
remove  = function(libName){
	var isDelete = deleteLibFile(libName)
	var msg;
	if(isDelete){
		msg = libName+":  删除成功"
	}else{
		msg = libName+": 删除失败包已经不存在或者被占用，请手动检查"
	}
	..publish("log",msg)
	return msg; 
}

/**intellisense(package)
_amodDir = appdata dir
_cacheDir = download dir
_cacheSystemLibPath = system lib cache file path
_cacheGithubLibPath = github lib chahe file path
_global_config_path =  fsys.joinpath(..io._exedir,"extensions","amod.toml")
_project_config_path = fsys.joinpath( projectDir,"amod.toml"
_global_install_path = io.fullpath("~/lib")
_project_install_path = fsys.joinpath(ide.getProjectDir(),"lib")	

loadCacheLib() = load local libs json file to table return table
getLocalPath() = get local toml path 
getGlobalPath() = get global toml path

loadConfig(tomlPath) = read toml to table
loadInstallLibs() = read toml to  dependencies to table
writConifg(.(libName,libInfo,tomlPath) = writ lib info  to toml config dependencies node
removeLibConfig(libName) = delete dependencies[libName] node

convLibPath(libName,basePath) = conv lib install dir
switchConfigPath(.(1)= 切换包安装显示路径 index{type number} 可选值为1=local, 2=global
loadInstallLibs() = return installed libs
update() = pull remote libs list to local cache file
remove(libName) = remove lib
filterLib(keywor,libs) = filter libs math keyword
installLib(libName,libInfo,installDir) = install lib
install(installPath,tomlPath) = install all libs for toml config,两个参数都是可选的
createLink (linkPath,targetPath)= 为 targetPath 创建链接，如果 targetPath 为文件则为硬链接，如果为目录则为符号链接

end intellisense**/
